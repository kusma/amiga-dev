/*
 * $Id: bsdsocket.h,v 1.11 2007-08-26 12:30:23 obarthel Exp $
 *
 * :ts=8
 *
 * 'Roadshow' -- Amiga TCP/IP stack
 * Copyright © 2001-2007 by Olaf Barthel.
 * All Rights Reserved.
 *
 * Amiga specific TCP/IP 'C' header files;
 * Freely Distributable
 */

#ifndef INLINE4_BSDSOCKET_H
#define INLINE4_BSDSOCKET_H

/*
** This file was auto generated by idltool 51.8.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef EXEC_LISTS_H
#include <exec/lists.h>
#endif
#ifndef DEVICES_TIMER_H
#include <devices/timer.h>
#endif
#ifndef UTILITY_TAGITEM_H
#include <utility/tagitem.h>
#endif
#ifndef UTILITY_HOOKS_H
#include <utility/hooks.h>
#endif
#ifndef NETINET_IN_H
#include <netinet/in.h>
#endif
#ifndef SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifndef SYS_MBUF_H
#include <sys/mbuf.h>
#endif
#ifndef NET_ROUTE_H
#include <net/route.h>
#endif
#ifndef NETDB_H
#include <netdb.h>
#endif
#ifndef LIBRARIES_BSDSOCKET_H
#include <libraries/bsdsocket.h>
#endif
#ifndef DOS_DOSEXTENS_H
#include <dos/dosextens.h>
#endif

/* Inline macros for Interface "main" */
#define socket(domain, type, protocol) ISocket->socket(domain, type, protocol) 
#define bind(sock, name, namelen) ISocket->bind(sock, name, namelen) 
#define listen(sock, backlog) ISocket->listen(sock, backlog) 
#define accept(sock, addr, addrlen) ISocket->accept(sock, addr, addrlen) 
#define connect(sock, name, namelen) ISocket->connect(sock, name, namelen) 
#define sendto(sock, buf, len, flags, to, tolen) ISocket->sendto(sock, buf, len, flags, to, tolen) 
#define send(sock, buf, len, flags) ISocket->send(sock, buf, len, flags) 
#define recvfrom(sock, buf, len, flags, addr, addrlen) ISocket->recvfrom(sock, buf, len, flags, addr, addrlen) 
#define recv(sock, buf, len, flags) ISocket->recv(sock, buf, len, flags) 
#define shutdown(sock, how) ISocket->shutdown(sock, how) 
#define setsockopt(sock, level, optname, optval, optlen) ISocket->setsockopt(sock, level, optname, optval, optlen) 
#define getsockopt(sock, level, optname, optval, optlen) ISocket->getsockopt(sock, level, optname, optval, optlen) 
#define getsockname(sock, name, namelen) ISocket->getsockname(sock, name, namelen) 
#define getpeername(sock, name, namelen) ISocket->getpeername(sock, name, namelen) 
#define IoctlSocket(sock, req, argp) ISocket->IoctlSocket(sock, req, argp) 
#define CloseSocket(sock) ISocket->CloseSocket(sock) 
#define WaitSelect(nfds, read_fds, write_fds, except_fds, _timeout, signals) ISocket->WaitSelect(nfds, read_fds, write_fds, except_fds, _timeout, signals) 
#define SetSocketSignals(int_mask, io_mask, urgent_mask) ISocket->SetSocketSignals(int_mask, io_mask, urgent_mask) 
#define getdtablesize() ISocket->getdtablesize() 
#define ObtainSocket(id, domain, type, protocol) ISocket->ObtainSocket(id, domain, type, protocol) 
#define ReleaseSocket(sock, id) ISocket->ReleaseSocket(sock, id) 
#define ReleaseCopyOfSocket(sock, id) ISocket->ReleaseCopyOfSocket(sock, id) 
#define Errno() ISocket->Errno() 
#define SetErrnoPtr(errno_ptr, size) ISocket->SetErrnoPtr(errno_ptr, size) 
#define Inet_NtoA(ip) ISocket->Inet_NtoA(ip) 
#define inet_addr(cp) ISocket->inet_addr(cp) 
#define Inet_LnaOf(in) ISocket->Inet_LnaOf(in) 
#define Inet_NetOf(in) ISocket->Inet_NetOf(in) 
#define Inet_MakeAddr(net, host) ISocket->Inet_MakeAddr(net, host) 
#define inet_network(cp) ISocket->inet_network(cp) 
#define gethostbyname(name) ISocket->gethostbyname(name) 
#define gethostbyaddr(addr, len, type) ISocket->gethostbyaddr(addr, len, type) 
#define getnetbyname(name) ISocket->getnetbyname(name) 
#define getnetbyaddr(net, type) ISocket->getnetbyaddr(net, type) 
#define getservbyname(name, proto) ISocket->getservbyname(name, proto) 
#define getservbyport(port, proto) ISocket->getservbyport(port, proto) 
#define getprotobyname(name) ISocket->getprotobyname(name) 
#define getprotobynumber(proto) ISocket->getprotobynumber(proto) 
#define vsyslog(pri, msg, args) ISocket->vsyslog(pri, msg, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define syslog(pri, ...) ISocket->syslog(pri, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define syslog(pri, vargs...) ISocket->syslog(pri, ## vargs) 
#endif
#define Dup2Socket(old_socket, new_socket) ISocket->Dup2Socket(old_socket, new_socket) 
#define sendmsg(sock, msg, flags) ISocket->sendmsg(sock, msg, flags) 
#define recvmsg(sock, msg, flags) ISocket->recvmsg(sock, msg, flags) 
#define gethostname(name, namelen) ISocket->gethostname(name, namelen) 
#define gethostid() ISocket->gethostid() 
#define SocketBaseTagList(tags) ISocket->SocketBaseTagList(tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define SocketBaseTags(...) ISocket->SocketBaseTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define SocketBaseTags(...) ISocket->SocketBaseTags(## vargs) 
#endif
#define GetSocketEvents(event_ptr) ISocket->GetSocketEvents(event_ptr) 
#define bpf_open(channel) ISocket->bpf_open(channel) 
#define bpf_close(channel) ISocket->bpf_close(channel) 
#define bpf_read(channel, buffer, len) ISocket->bpf_read(channel, buffer, len) 
#define bpf_write(channel, buffer, len) ISocket->bpf_write(channel, buffer, len) 
#define bpf_set_notify_mask(channel, signal_mask) ISocket->bpf_set_notify_mask(channel, signal_mask) 
#define bpf_set_interrupt_mask(channel, signal_mask) ISocket->bpf_set_interrupt_mask(channel, signal_mask) 
#define bpf_ioctl(channel, command, buffer) ISocket->bpf_ioctl(channel, command, buffer) 
#define bpf_data_waiting(channel) ISocket->bpf_data_waiting(channel) 
#define AddRouteTagList(tags) ISocket->AddRouteTagList(tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AddRouteTags(...) ISocket->AddRouteTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AddRouteTags(...) ISocket->AddRouteTags(## vargs) 
#endif
#define DeleteRouteTagList(tags) ISocket->DeleteRouteTagList(tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define DeleteRouteTags(...) ISocket->DeleteRouteTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define DeleteRouteTags(...) ISocket->DeleteRouteTags(## vargs) 
#endif
#define ChangeRouteTagList(tags) ISocket->ChangeRouteTagList(tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ChangeRouteTags(...) ISocket->ChangeRouteTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ChangeRouteTags(...) ISocket->ChangeRouteTags(## vargs) 
#endif
#define FreeRouteInfo(buf) ISocket->FreeRouteInfo(buf) 
#define GetRouteInfo(address_family, flags) ISocket->GetRouteInfo(address_family, flags) 
#define AddInterfaceTagList(interface_name, device_name, unit, tags) ISocket->AddInterfaceTagList(interface_name, device_name, unit, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AddInterfaceTags(interface_name, device_name, ...) ISocket->AddInterfaceTags(interface_name, device_name, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AddInterfaceTags(interface_name, device_name, vargs...) ISocket->AddInterfaceTags(interface_name, device_name, ## vargs) 
#endif
#define ConfigureInterfaceTagList(interface_name, tags) ISocket->ConfigureInterfaceTagList(interface_name, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ConfigureInterfaceTags(...) ISocket->ConfigureInterfaceTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ConfigureInterfaceTags(vargs...) ISocket->ConfigureInterfaceTags(## vargs) 
#endif
#define ReleaseInterfaceList(list) ISocket->ReleaseInterfaceList(list) 
#define ObtainInterfaceList() ISocket->ObtainInterfaceList() 
#define QueryInterfaceTagList(interface_name, tags) ISocket->QueryInterfaceTagList(interface_name, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define QueryInterfaceTags(...) ISocket->QueryInterfaceTags(__VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define QueryInterfaceTags(vargs...) ISocket->QueryInterfaceTags(## vargs) 
#endif
#define CreateAddrAllocMessageA(version, protocol, interface_name, result_ptr, tags) ISocket->CreateAddrAllocMessageA(version, protocol, interface_name, result_ptr, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define CreateAddrAllocMessage(version, protocol, interface_name, ...) ISocket->CreateAddrAllocMessage(version, protocol, interface_name, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define CreateAddrAllocMessage(version, protocol, interface_name, vargs...) ISocket->CreateAddrAllocMessage(version, protocol, interface_name, ## vargs) 
#endif
#define DeleteAddrAllocMessage(aam) ISocket->DeleteAddrAllocMessage(aam) 
#define BeginInterfaceConfig(message) ISocket->BeginInterfaceConfig(message) 
#define AbortInterfaceConfig(message) ISocket->AbortInterfaceConfig(message) 
#define AddNetMonitorHookTagList(type, hook, tags) ISocket->AddNetMonitorHookTagList(type, hook, tags) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define AddNetMonitorHookTags(type, ...) ISocket->AddNetMonitorHookTags(type, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define AddNetMonitorHookTags(type, vargs...) ISocket->AddNetMonitorHookTags(type, ## vargs) 
#endif
#define RemoveNetMonitorHook(hook) ISocket->RemoveNetMonitorHook(hook) 
#define GetNetworkStatistics(type, version, destination, size) ISocket->GetNetworkStatistics(type, version, destination, size) 
#define AddDomainNameServer(address) ISocket->AddDomainNameServer(address) 
#define RemoveDomainNameServer(address) ISocket->RemoveDomainNameServer(address) 
#define ReleaseDomainNameServerList(list) ISocket->ReleaseDomainNameServerList(list) 
#define ObtainDomainNameServerList() ISocket->ObtainDomainNameServerList() 
#define setnetent(stay_open) ISocket->setnetent(stay_open) 
#define endnetent() ISocket->endnetent() 
#define getnetent() ISocket->getnetent() 
#define setprotoent(stay_open) ISocket->setprotoent(stay_open) 
#define endprotoent() ISocket->endprotoent() 
#define getprotoent() ISocket->getprotoent() 
#define setservent(stay_open) ISocket->setservent(stay_open) 
#define endservent() ISocket->endservent() 
#define getservent() ISocket->getservent() 
#define inet_aton(cp, addr) ISocket->inet_aton(cp, addr) 
#define inet_ntop(af, src, dst, size) ISocket->inet_ntop(af, src, dst, size) 
#define inet_pton(af, src, dst) ISocket->inet_pton(af, src, dst) 
#define In_LocalAddr(address) ISocket->In_LocalAddr(address) 
#define In_CanForward(address) ISocket->In_CanForward(address) 
#define mbuf_copym(m, off, len) ISocket->mbuf_copym(m, off, len) 
#define mbuf_copyback(m, off, len, cp) ISocket->mbuf_copyback(m, off, len, cp) 
#define mbuf_copydata(m, off, len, cp) ISocket->mbuf_copydata(m, off, len, cp) 
#define mbuf_free(m) ISocket->mbuf_free(m) 
#define mbuf_freem(m) ISocket->mbuf_freem(m) 
#define mbuf_get() ISocket->mbuf_get() 
#define mbuf_gethdr() ISocket->mbuf_gethdr() 
#define mbuf_prepend(m, len) ISocket->mbuf_prepend(m, len) 
#define mbuf_cat(m, n) ISocket->mbuf_cat(m, n) 
#define mbuf_adj(mp, req_len) ISocket->mbuf_adj(mp, req_len) 
#define mbuf_pullup(m, len) ISocket->mbuf_pullup(m, len) 
#define ProcessIsServer(pr) ISocket->ProcessIsServer(pr) 
#define ObtainServerSocket() ISocket->ObtainServerSocket() 
#define GetDefaultDomainName(buffer, buffer_size) ISocket->GetDefaultDomainName(buffer, buffer_size) 
#define SetDefaultDomainName(buffer) ISocket->SetDefaultDomainName(buffer) 
#define ObtainRoadshowData(access) ISocket->ObtainRoadshowData(access) 
#define ReleaseRoadshowData(list) ISocket->ReleaseRoadshowData(list) 
#define ChangeRoadshowData(list, name, length, data) ISocket->ChangeRoadshowData(list, name, length, data) 
#define RemoveInterface(interface_name, force) ISocket->RemoveInterface(interface_name, force) 
#define ipf_open(channel) ISocket->ipf_open(channel) 
#define ipf_close(channel) ISocket->ipf_close(channel) 
#define ipf_ioctl(channel, command, buffer) ISocket->ipf_ioctl(channel, command, buffer) 
#define ipf_log_read(channel, buffer, len) ISocket->ipf_log_read(channel, buffer, len) 
#define ipf_log_data_waiting(channel) ISocket->ipf_log_data_waiting(channel) 
#define ipf_set_notify_mask(channel, mask) ISocket->ipf_set_notify_mask(channel, mask) 
#define ipf_set_interrupt_mask(channel, mask) ISocket->ipf_set_interrupt_mask(channel, mask) 

#endif /* INLINE4_BSDSOCKET_H */
